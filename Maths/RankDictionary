#define MOD 1000003

//Generates an array for factorials uptil the string length
//Much faster than factorial recursive program
void initializeFactorials(int maxNum, vector<int>&facts) {
    facts.push_back(1);
    for(int curr=1; curr<=maxNum; curr++)
        facts.push_back((facts[curr-1]*curr)%MOD);
}

long long int inverseNumber(int num) {
    // Inverse modulo : https://en.wikipedia.org/wiki/Modular_multiplicative_inverse
    // Calculate num ^ MOD-2  % MOD
    long long int ans = 1, base = (long long) num;
    int power = MOD - 2;
    while (power > 0) {
        if (power == 1) return (ans * base) % MOD;
            
        if (power % 2 == 0) {
            base = (base * base) % MOD;
            power /= 2;
        } 
        else {
            ans = (ans * base) % MOD;
            power--;
        }
    }
    return ans;
}


int Solution::findRank(string S) {
    int n = S.size();
    int charCount[128];
    memset(charCount, 0, 128*sizeof(int));
    for(int i=0; i<n; i++) charCount[S[i]]++;
    
    vector<int>fact;
    initializeFactorials(n-1, fact);
    
    long long int rank = 1;
    for(int i=0; i<n; i++) {
        //calculate no of permutaions with characters from i to n
        //by placing characters smaller than S[i] at ith position
        long long int less = 0;
        int remaining = n-i-1;
        //starting with ch which is less than S[i]
        for (int ch = 0; ch < S[i]; ch++) {
            if (charCount[ch] == 0) continue;
            charCount[ch]--;
            long long int numPermutation = fact[remaining];
            //calculate repetions        
            for (int c = 65; c < 128; c++) {
                if (charCount[c] <= 1) continue; 
                numPermutation = (numPermutation * inverseNumber(fact[charCount[c]]))%MOD;
            }

            charCount[ch]++;
            less = (less + numPermutation) % MOD;
        }
                
        rank = (rank + less) % MOD;
        // remove the current character from the set. 
        charCount[S[i]]--;
    }
    return rank;
}
