//heapify,    , places elements in a heap
//@param, size, ele upto which we need to heapify
//@parma, k   , below which we need to heapify
void heapify(int *arr, int size, int k) {
	int largest = k, l = 2*k+1, r = 2*k+2;
	
	//checking junction for largest element
	if(l<size && a[l]>a[largest]) largest = l;
	if(r<size && a[r]>a[largest])  largest = r;
	
	if(largest != k) {
		swap(a[k], a[largest]);
		//heapify the swaped sub-tree
		//as a smaller element moved there
		heapify(arr, size, largest);
	}
}

void heap_sort(int *arr, int size) {
	//k implies here the last node with 1 or 2 ele
	//from node k, we will heapify the entire tree moving upwards
	for(int k=n/2-1; k>=0; k--) {
		heapify(arr, size, k);
	}
	
	//swap the last element and top(largest)
	//largest is now at end
	//heapify the tree again from top
	//removing the last element(largest)
	for(int i=size-1; i>=0; i--) {
		swap(arr[0], arr[i]);
		heapify(arr, i, 0);
	}
}
