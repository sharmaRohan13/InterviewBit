int Solution::isNumber(const string A) {
    int n = A.size(), i = 0;
    bool flagdot = false, flag = false;
    while(i < n && A[i] == ' ')  i++;
    bool flagspace = false, num = false;
    while(i < n) {
        //spaces in between
        if(flagspace && A[i] != ' ') return 0;
        //trailing spaces
        if(A[i] == ' ') {
            flagspace = true;
            i++;
            continue;
        }
        //always true
        if(A[i] >= '0' && A[i] <= '9') {
            //for in between plus minus
            flag = true;
            num = true;
            i++;
            continue;
        }
        //double or in between plus minus
        if(flag && (A[i] == '+' || A[i] == '-')) return 0;
        
        //single plus minus
        if(!flag && (A[i] == '+' || A[i] == '-')) {
            flag = true;  
            i++; 
            continue;
        }
        //double dot
        if(!flagdot && A[i] == '.') {
            if(i >= n-1) return 0;
            if(A[i+1] < '0' || A[i+1] > '9') return 0;
            flagdot = true;
            i++;
            continue;
        }
        //single dot
        if(flagdot && A[i] == '.')  return 0;
        //exponent
        if(A[i] == 'e') {
            flagdot = true;
            //nothing before or after exp
            if(i <= 0 || i >= n-1 ) return 0;
            if(A[i-1] < '0' || A[i-1] > '9') return 0;
            if(A[i+1] < '0' || A[i+1] > '9') {
                if(A[i+1] == '+' || A[i+1] == '-') {
                    i += 2;
                    continue;
                }
                else return 0;
            }
            i++;
            continue;
        }
        //anything else 
        else return 0;
        i++;
    }
    if (num) return 1;
    return 0;
}
