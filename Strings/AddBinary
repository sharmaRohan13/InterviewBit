#include <stack>
string Solution::addBinary(string A, string B) {
    int n = A.size()-1, m = B.size()-1, carry = 0;
    stack<char> sum;
    while(n >= 0 && m >= 0) {
        int digit = carry + (A[n] - '0') + (B[m] - '0');
        if(digit == 0)  {
            carry = 0;
            sum.push('0');
        }
        else if(digit == 1)  {
            carry = 0;
            sum.push('1');
        }
        else if(digit == 2)  {
            carry = 1;
            sum.push('0');
        }
        else {
            carry = 1;
            sum.push('1');
        }
        n--; m--;
    }
    while(n >= 0) {
        int digit = carry + (A[n] - '0');
            carry = 0;
            sum.push('0');
        }
        else if(digit == 1)  {
            carry = 0;
            sum.push('1');
        }
        else {
            carry = 1;
            sum.push('0');
        }
        n--;
    }
    while(m >= 0) {
        int digit = carry + (B[m] - '0');
        if(digit == 0)  {
            carry = 0;
            sum.push('0');
        }
        else if(digit == 1)  {
            carry = 0;
            sum.push('1');
        }
        else {
            carry = 1;
            sum.push('0');
        }
        m--;
    }
    if(carry == 1) sum.push('1');
    string ans = "";
    while(!sum.empty()) {
        ans += sum.top();
        sum.pop();
    }
    return ans;
}
